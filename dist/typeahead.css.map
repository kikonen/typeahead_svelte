{
  "version": 3,
  "file": "typeahead.css",
  "sources": [
    "../src/typeahead.svelte"
  ],
  "sourcesContent": [
    "<script>\n import {onMount} from 'svelte';\n\n const I18N_DEFAULTS = {\n     fetching: 'Searching..',\n     no_results: 'No results',\n     too_short: 'Too short',\n     has_more: 'More...',\n     fetching_more: 'Searching more...',\n };\n\n export let real;\n export let fetcher;\n export let queryMinLen = 1;\n export let onSelected = function() {};\n export let translations = I18N_DEFAULTS;\n\n let query = '';\n\n let entries = [];\n\n let hasMore = false;\n let tooShort = false;\n let fetchingMore = false;\n let fetchError = null;\n\n let popupVisible = false;\n let activeFetch = null;\n\n let input;\n let toggle;\n let popup;\n let more;\n\n let previousQuery = null;\n let fetched = false;\n let selectedItem = null;\n let downQuery = null;\n let wasDown = false;\n\n ////////////////////////////////////////////////////////////\n //\n function fetchEntries(more) {\n     let currentQuery = query.trim();\n     if (currentQuery.length > 0) {\n         currentQuery = query;\n     }\n\n     if (!more && !fetchingMore && currentQuery === previousQuery) {\n         return;\n     }\n\n//     console.debug(\"START fetch: \" + currentQuery);\n\n     cancelFetch();\n\n     let fetchOffset = 0;\n\n     if (more) {\n         fetchOffset = fetchOffset + entries.length\n         fetchingMore = true;\n     } else {\n         entries = [];\n         hasMore = false;\n         fetched = false;\n         fetchingMore = false;\n     }\n     fetchError = null;\n\n     let currentFetchOffset = fetchOffset;\n     let currentFetchingMore = fetchingMore;\n\n     let currentFetch = new Promise(function(resolve, reject) {\n         if (currentFetchingMore) {\n//             console.debug(\"MOR hit: \" + currentQuery);\n             resolve(fetcher(currentFetchOffset, currentQuery));\n         } else {\n             if (currentQuery.length < queryMinLen) {\n//                 console.debug(\"TOO_SHORT fetch: \" + currentQuery + \", limit: \" + queryMinLen);\n                 resolve({\n                     entries: [],\n                     info: {\n                         more: false,\n                         too_short: true,\n                     }\n                 });\n             } else {\n//                 console.debug(\"TIMER start: \" + currentQuery);\n                 setTimeout(function() {\n                     if (currentFetch === activeFetch) {\n//                         console.debug(\"TIMER hit: \" + currentQuery);\n                         resolve(fetcher(currentFetchOffset, currentQuery));\n                     } else {\n//                         console.debug(\"TIMER reject: \" + currentQuery);\n                         reject(\"cancel\");\n                     }\n                 }, 300);\n             }\n         }\n     }).then(function(response) {\n         if (currentFetch === activeFetch) {\n             let newEntries = response.entries || [];\n             let info = response.info || {};\n\n             console.debug(\"APPLY fetch: \" + currentQuery + \", isMore: \" + currentFetchingMore + \", offset: \" + currentFetchOffset + \", resultSize: \" + newEntries.length + \", oldSize: \" + entries.length);\n             console.debug(info);\n\n             let updateEntries;\n             if (currentFetchingMore) {\n                 updateEntries = entries;\n                 newEntries.forEach(function(item) {\n                     updateEntries.push(item);\n                 });\n             } else {\n                 updateEntries = newEntries;\n             }\n             entries = updateEntries;\n\n             hasMore = info.more;\n             tooShort = info.too_short;\n\n             previousQuery = currentQuery;\n             activeFetch = null;\n             fetched = true;\n             fetchingMore = false;\n//         } else {\n//             console.debug(\"ABORT fetch: \" + currentQuery);\n         }\n     }).catch(function(err) {\n         if (currentFetch === activeFetch) {\n             console.error(err);\n\n             fetchError = err;\n             entries = [];\n             hasMore = false;\n             tooShort = false;\n             previousQuery = null;\n             activeFetch = null;\n             fetched = false;\n             fetchingMode = false;\n\n             input.focus();\n             openPopup();\n         }\n     });\n\n     activeFetch = currentFetch;\n }\n\n function cancelFetch() {\n     if (activeFetch !== null) {\n         activeFetch = null;\n         // no result fetched; since it doesn't match input any longer\n         fetched = false;\n         previousQuery = null;\n     }\n }\n\n function fetchMoreIfneeded() {\n     if (hasMore && !fetchingMore) {\n         // console.debug({scrollTop: popup.scrollTop, clientHeight: popup.clientHeight, scrollHeight: popup.scrollHeight, moreHeight: more.clientHeight});\n         // console.debug(popup.scrollTop + popup.clientHeight >= popup.scrollHeight - more.height);\n\n         if (popup.scrollTop + popup.clientHeight >= popup.scrollHeight - more.clientHeight * 2 - 2) {\n             fetchEntries(true);\n         }\n     }\n }\n\n function closePopup(focusInput) {\n     popupVisible = false;\n     if (focusInput) {\n         input.focus();\n     }\n }\n\n function openPopup() {\n     if (!popupVisible) {\n         popupVisible = true;\n         let w = input.parentElement.offsetWidth;\n         popup.style.minWidth = w + \"px\";\n     }\n }\n\n function selectItem(el) {\n     let item = entries[el.dataset.index];\n     if (item) {\n         selectedItem = item;\n         let changed = item.text !== query\n         query = item.text;\n\n         previousQuery = query.trim();\n         if (previousQuery.length > 0) {\n             previousQuery = query;\n         }\n\n         closePopup(true);\n         if (changed) {\n             previousQuery = null;\n         }\n\n         real.setAttribute('value', query);\n         onSelected(item);\n//     } else {\n//         console.debug(\"MISSING item\", el);\n     }\n }\n\n function containsElement(el) {\n     return el === input || el === toggle || popup.contains(el);\n }\n\n function hasModifier(event) {\n     return event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;\n }\n\n function translate(key) {\n     return translations[key] || I18N_DEFAULTS[key];\n }\n\n ////////////////////////////////////////////////////////////\n // HANDLERS\n //\n $: real.setAttribute('value', query);\n\n onMount(function() {\n     query = real.value || '';\n     real.classList.add('d-none');\n     real.addEventListener('change', function() {\n         var realValue = real.getAttribute('value');\n         if (realValue !== query) {\n             console.debug(\"Changed: \" + realValue);\n             query = realValue;\n         }\n     });\n });\n\n function nop() {};\n\n let inputKeypressHandlers = {\n     base: function(event) {\n         selectedItem = false;\n     },\n };\n\n let inputKeydownHandlers = {\n     base: function(event) {\n         wasDown = true;\n     },\n     ArrowDown: function(event) {\n         let item = popupVisible ? popup.querySelector('.js-item:first-child') : null;\n         if (item) {\n             item.focus();\n         } else {\n             openPopup();\n             fetchEntries();\n         }\n         event.preventDefault();\n     },\n     ArrowUp: function(event) {\n         // NOTE KI closing popup here is *irritating* i.e. if one is trying to select\n         // first entry in dropdown\n         event.preventDefault();\n     },\n     Escape: function(event) {\n         cancelFetch();\n         closePopup(false);\n     },\n     Tab: nop,\n };\n\n let inputKeyupHandlers = {\n     base: function(event) {\n         if (wasDown) {\n             openPopup();\n             fetchEntries();\n         }\n     },\n     Enter: nop,\n     Escape: nop,\n     Tab: nop,\n     // skip \"meta\" keys from triggering search\n     ArrowDown: nop,\n     ArrowUp: nop,\n     ArrowLeft: nop,\n     ArrowRight: nop,\n     PageDown: nop,\n     PageUp: nop,\n     Home: nop,\n     End: nop,\n     // disallow modifier keys to trigger search\n     Control: nop,\n     Shift: nop,\n     AltGraph: nop,\n     Meta: nop,\n     ContextMenu: nop,\n }\n\n let toggleKeydownHandlers = {\n     base: function(event) {\n         input.focus();\n     },\n     ArrowDown: inputKeydownHandlers.ArrowDown,\n     ArrowUp: inputKeydownHandlers.ArrowDown,\n     Escape: function(event) {\n         cancelFetch();\n         closePopup(false);\n         input.focus();\n     },\n     Tab: function(event) {\n         input.focus();\n     },\n };\n\n let itemKeydownHandlers = {\n     base: function(event) {\n         input.focus();\n     },\n     ArrowDown: function(event) {\n         let next = event.target.nextElementSibling;\n\n         if (next) {\n             if (!next.classList.contains('js-item')) {\n                 next = null;\n             }\n         }\n\n         if (next) {\n             next.focus();\n         }\n         event.preventDefault();\n     },\n     ArrowUp: function(event) {\n         let next = event.target.previousElementSibling;\n\n         if (next) {\n             if (!next.classList.contains('js-item')) {\n                 next = null;\n             }\n         }\n\n         if (next) {\n             next.focus();\n         } else {\n             input.focus();\n         }\n         event.preventDefault();\n     },\n     Enter: function(event) {\n         selectItem(event.target)\n         event.preventDefault();\n     },\n     Escape: function(event) {\n         cancelFetch();\n         closePopup(true);\n     },\n     // allow \"meta\" keys to navigate in items\n     PageUp: nop,\n     PageDown: nop,\n     Home: nop,\n     End: nop,\n     // disallow modifier keys to trigger search\n     Control: nop,\n     Shift: nop,\n     AltGraph: nop,\n     Meta: nop,\n     ContextMenu: nop,\n };\n\n let itemKeyupHandlers = {\n     base: nop,\n     // allow \"meta\" keys to navigate in items\n     PageUp: function(event) {\n         let scrollLeft = document.body.scrollLeft;\n         let scrollTop = document.body.scrollTop;\n\n         let rect = popup.getBoundingClientRect();\n         let item = document.elementFromPoint(scrollLeft + rect.x + 10, scrollTop + rect.top + 1);\n         if (!item) {\n             item = popup.querySelector('.js-item:first-child');\n         } else {\n             if (!item.classList.contains('js-item')) {\n                 item = popup.querySelector('.js-item:first-child');\n             }\n         }\n         if (item) {\n             item.focus();\n         }\n         event.preventDefault();\n     },\n     PageDown: function(event) {\n         let scrollLeft = document.body.scrollLeft;\n         let scrollTop = document.body.scrollTop;\n         let h = popup.offsetHeight;\n\n         let rect = popup.getBoundingClientRect();\n         let item = document.elementFromPoint(scrollLeft + rect.x + 10, scrollTop + rect.top + h - 10);\n         if (!item) {\n             item = popup.querySelector('.js-item:last-child');\n         } else {\n             if (!item.classList.contains('js-item')) {\n                 item = popup.querySelector('.js-item:last-child');\n             }\n         }\n         if (item) {\n             item.focus();\n         }\n\n         event.preventDefault();\n     },\n     Home: function(event) {\n         let item = popup.querySelector('.js-item:first-child');\n         if (item) {\n             item.focus();\n         }\n         event.preventDefault();\n     },\n     End: function(event) {\n         let item = popup.querySelector('.js-item:last-child');\n         if (item) {\n             item.focus();\n         }\n         event.preventDefault();\n     },\n }\n\n function handleEvent(code, handlers, event) {\n     let handler = handlers[code] || handlers.base;\n     handler(event);\n }\n\n function handleBlur(event) {\n     if (!containsElement(event.relatedTarget)) {\n         cancelFetch();\n         closePopup(false);\n     }\n }\n\n function handleInputKeypress(event) {\n     handleEvent(event.key, inputKeypressHandlers, event);\n }\n\n function handleInputKeydown(event) {\n     handleEvent(event.key, inputKeydownHandlers, event);\n }\n\n function handleInputKeyup(event) {\n     handleEvent(event.key, inputKeyupHandlers, event);\n }\n\n function handleInputClick(event) {\n }\n\n function handleToggleKeydown(event) {\n     handleEvent(event.key, toggleKeydownHandlers, event);\n }\n\n function handleToggleClick(event) {\n     if (event.button === 0 && !hasModifier(event)) {\n         if (popupVisible) {\n             closePopup(false);\n         } else {\n             openPopup();\n             fetchEntries();\n         }\n     }\n }\n\n function handleItemKeydown(event) {\n     handleEvent(event.key, itemKeydownHandlers, event);\n }\n\n function handleItemKeyup(event) {\n     handleEvent(event.key, itemKeyupHandlers, event);\n }\n\n function handleItemClick() {\n     if (event.button === 0 && !hasModifier(event)) {\n         selectItem(event.target)\n     }\n }\n\n function handlePopupScroll(event) {\n     fetchMoreIfneeded();\n }\n</script>\n\n<!-- ------------------------------------------------------------ -->\n<!-- ------------------------------------------------------------ -->\n<style>\n .typeahead {\n     position: relative;\n }\n .typeahead-popup {\n     max-height: 15rem;\n     max-width: 90vw;\n     overflow-y: auto;\n }\n .no-click {\n     pointer-events: none;\n }\n</style>\n\n<!-- ------------------------------------------------------------ -->\n<!-- ------------------------------------------------------------ -->\n<div class=\"input-group mb-3 typeahead js-typeahead-container\">\n  <input class=\"js-input {real.getAttribute('class')}\"\n         data-target=\"{real.id}\"\n         placeholder=\"{real.placeholder}\"\n         bind:this={input}\n         bind:value={query}\n         on:blur={handleBlur}\n         on:keypress={handleInputKeypress}\n         on:keydown={handleInputKeydown}\n         on:keyup={handleInputKeyup}\n         on:click={handleInputClick}>\n  <div class=\"input-group-append\">\n    <button class=\"btn btn-outline-secondary\" type=\"button\" tabindex=\"-1\"\n            bind:this={toggle}\n            on:blur={handleBlur}\n            on:keydown={handleToggleKeydown}\n            on:click={handleToggleClick}>\n      <i class=\"fas fa-caret-down\"></i>\n    </button>\n  </div>\n\n  <div class=\"js-popup dropdown-menu typeahead-popup {popupVisible ? 'show' : ''}\"\n       bind:this={popup}\n       on:scroll|passive={handlePopupScroll}>\n    {#if fetchError }\n      <div tabindex=-1 class=\"dropdown-item text-danger\">\n        {fetchError}\n      </div>\n    {:else}\n      {#if activeFetch }\n        {#if !fetchingMore }\n          <div tabindex=-1 class=\"dropdown-item text-muted\">\n            {translate('fetching')}\n          </div>\n        {/if}\n      {:else}\n        {#if entries.length === 0 }\n          <div tabindex=-1 class=\"dropdown-item text-muted\">\n            {#if tooShort }\n              {translate('too_short')}\n            {:else}\n              {translate('no_results')}\n            {/if}\n          </div>\n        {/if}\n      {/if}\n    {/if}\n\n    {#if (!activeFetch  || fetchingMore) && entries.length > 0 }\n      {#each entries as item, index}\n        <div tabindex=1 class=\"js-item dropdown-item\"  data-index=\"{index}\"\n             on:blur={handleBlur}\n             on:click={handleItemClick}\n             on:keydown={handleItemKeydown}\n             on:keyup={handleItemKeyup}>\n          <div class=\"no-click\">\n            {item.text}\n          </div>\n          {#if item.desc}\n            <div class=\"no-click text-muted\">\n              {item.desc}\n            </div>\n          {/if}\n        </div>\n      {/each}\n    {/if}\n\n    {#if hasMore}\n      <div tabindex=\"-1\"\n           class=\"js-more dropdown-item text-muted\"\n           bind:this={more}>\n        {translate('has_more')}\n      </div>\n    {/if}\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA0eC,UAAU,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,AACtB,CAAC,AACD,gBAAgB,cAAC,CAAC,AACd,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,SAAS,cAAC,CAAC,AACP,cAAc,CAAE,IAAI,AACxB,CAAC"
}